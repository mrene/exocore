// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: exocore/store/mutation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Exocore_Store_MutationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// Mutations to apply.
  public var mutations: [Exocore_Store_EntityMutation] = []

  //// Waits for mutation to be indexed.
  public var waitIndexed: Bool = false

  //// Waits for mutation to be indexed and returns the mutated entities.
  public var returnEntities: Bool = false

  //// If an entity ID is generated for the mutated entities, reuse the same ID for all mutations.
  public var commonEntityID: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Exocore_Store_MutationResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// Unique operation ids for each mutations.
  public var operationIds: [UInt64] = []

  //// Mutated entities if requested.
  public var entities: [Exocore_Store_Entity] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Exocore_Store_EntityMutation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entityID: String = String()

  public var mutation: Exocore_Store_EntityMutation.OneOf_Mutation? = nil

  public var putTrait: Exocore_Store_PutTraitMutation {
    get {
      if case .putTrait(let v)? = mutation {return v}
      return Exocore_Store_PutTraitMutation()
    }
    set {mutation = .putTrait(newValue)}
  }

  public var deleteTrait: Exocore_Store_DeleteTraitMutation {
    get {
      if case .deleteTrait(let v)? = mutation {return v}
      return Exocore_Store_DeleteTraitMutation()
    }
    set {mutation = .deleteTrait(newValue)}
  }

  public var deleteEntity: Exocore_Store_DeleteEntityMutation {
    get {
      if case .deleteEntity(let v)? = mutation {return v}
      return Exocore_Store_DeleteEntityMutation()
    }
    set {mutation = .deleteEntity(newValue)}
  }

  public var updateTrait: Exocore_Store_UpdateTraitMutation {
    get {
      if case .updateTrait(let v)? = mutation {return v}
      return Exocore_Store_UpdateTraitMutation()
    }
    set {mutation = .updateTrait(newValue)}
  }

  public var compactTrait: Exocore_Store_CompactTraitMutation {
    get {
      if case .compactTrait(let v)? = mutation {return v}
      return Exocore_Store_CompactTraitMutation()
    }
    set {mutation = .compactTrait(newValue)}
  }

  public var test: Exocore_Store_TestMutation {
    get {
      if case .test(let v)? = mutation {return v}
      return Exocore_Store_TestMutation()
    }
    set {mutation = .test(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Mutation: Equatable {
    case putTrait(Exocore_Store_PutTraitMutation)
    case deleteTrait(Exocore_Store_DeleteTraitMutation)
    case deleteEntity(Exocore_Store_DeleteEntityMutation)
    case updateTrait(Exocore_Store_UpdateTraitMutation)
    case compactTrait(Exocore_Store_CompactTraitMutation)
    case test(Exocore_Store_TestMutation)

  #if !swift(>=4.1)
    public static func ==(lhs: Exocore_Store_EntityMutation.OneOf_Mutation, rhs: Exocore_Store_EntityMutation.OneOf_Mutation) -> Bool {
      switch (lhs, rhs) {
      case (.putTrait(let l), .putTrait(let r)): return l == r
      case (.deleteTrait(let l), .deleteTrait(let r)): return l == r
      case (.deleteEntity(let l), .deleteEntity(let r)): return l == r
      case (.updateTrait(let l), .updateTrait(let r)): return l == r
      case (.compactTrait(let l), .compactTrait(let r)): return l == r
      case (.test(let l), .test(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Exocore_Store_PutTraitMutation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var trait: Exocore_Store_Trait {
    get {return _trait ?? Exocore_Store_Trait()}
    set {_trait = newValue}
  }
  /// Returns true if `trait` has been explicitly set.
  public var hasTrait: Bool {return self._trait != nil}
  /// Clears the value of `trait`. Subsequent reads from it will return its default value.
  public mutating func clearTrait() {self._trait = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _trait: Exocore_Store_Trait? = nil
}

public struct Exocore_Store_DeleteTraitMutation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var traitID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Exocore_Store_DeleteEntityMutation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Exocore_Store_UpdateTraitMutation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var traitID: String = String()

  public var trait: Exocore_Store_Trait {
    get {return _trait ?? Exocore_Store_Trait()}
    set {_trait = newValue}
  }
  /// Returns true if `trait` has been explicitly set.
  public var hasTrait: Bool {return self._trait != nil}
  /// Clears the value of `trait`. Subsequent reads from it will return its default value.
  public mutating func clearTrait() {self._trait = nil}

  public var fieldMask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _fieldMask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_fieldMask = newValue}
  }
  /// Returns true if `fieldMask` has been explicitly set.
  public var hasFieldMask: Bool {return self._fieldMask != nil}
  /// Clears the value of `fieldMask`. Subsequent reads from it will return its default value.
  public mutating func clearFieldMask() {self._fieldMask = nil}

  /// Updates is only valid if the last mutation operation on trait this given operation id.
  public var ifLastOperationID: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _trait: Exocore_Store_Trait? = nil
  fileprivate var _fieldMask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
}

public struct Exocore_Store_CompactTraitMutation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// List of operations that are compacted by this compaction. The compaction will only succeed
  /// if there were no operations between these operations and the compaction's operation itself.
  public var compactedOperations: [Exocore_Store_CompactTraitMutation.Operation] = []

  /// Trait with merged values from compacted operations
  public var trait: Exocore_Store_Trait {
    get {return _trait ?? Exocore_Store_Trait()}
    set {_trait = newValue}
  }
  /// Returns true if `trait` has been explicitly set.
  public var hasTrait: Bool {return self._trait != nil}
  /// Clears the value of `trait`. Subsequent reads from it will return its default value.
  public mutating func clearTrait() {self._trait = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var operationID: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _trait: Exocore_Store_Trait? = nil
}

public struct Exocore_Store_TestMutation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var success: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "exocore.store"

extension Exocore_Store_MutationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MutationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mutations"),
    2: .standard(proto: "wait_indexed"),
    3: .standard(proto: "return_entities"),
    4: .standard(proto: "common_entity_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.mutations)
      case 2: try decoder.decodeSingularBoolField(value: &self.waitIndexed)
      case 3: try decoder.decodeSingularBoolField(value: &self.returnEntities)
      case 4: try decoder.decodeSingularBoolField(value: &self.commonEntityID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mutations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mutations, fieldNumber: 1)
    }
    if self.waitIndexed != false {
      try visitor.visitSingularBoolField(value: self.waitIndexed, fieldNumber: 2)
    }
    if self.returnEntities != false {
      try visitor.visitSingularBoolField(value: self.returnEntities, fieldNumber: 3)
    }
    if self.commonEntityID != false {
      try visitor.visitSingularBoolField(value: self.commonEntityID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Exocore_Store_MutationRequest, rhs: Exocore_Store_MutationRequest) -> Bool {
    if lhs.mutations != rhs.mutations {return false}
    if lhs.waitIndexed != rhs.waitIndexed {return false}
    if lhs.returnEntities != rhs.returnEntities {return false}
    if lhs.commonEntityID != rhs.commonEntityID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Exocore_Store_MutationResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MutationResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "operation_ids"),
    2: .same(proto: "entities"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt64Field(value: &self.operationIds)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.entities)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.operationIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.operationIds, fieldNumber: 1)
    }
    if !self.entities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entities, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Exocore_Store_MutationResult, rhs: Exocore_Store_MutationResult) -> Bool {
    if lhs.operationIds != rhs.operationIds {return false}
    if lhs.entities != rhs.entities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Exocore_Store_EntityMutation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EntityMutation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_id"),
    2: .standard(proto: "put_trait"),
    3: .standard(proto: "delete_trait"),
    4: .standard(proto: "delete_entity"),
    5: .standard(proto: "update_trait"),
    6: .standard(proto: "compact_trait"),
    99: .same(proto: "test"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.entityID)
      case 2:
        var v: Exocore_Store_PutTraitMutation?
        if let current = self.mutation {
          try decoder.handleConflictingOneOf()
          if case .putTrait(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.mutation = .putTrait(v)}
      case 3:
        var v: Exocore_Store_DeleteTraitMutation?
        if let current = self.mutation {
          try decoder.handleConflictingOneOf()
          if case .deleteTrait(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.mutation = .deleteTrait(v)}
      case 4:
        var v: Exocore_Store_DeleteEntityMutation?
        if let current = self.mutation {
          try decoder.handleConflictingOneOf()
          if case .deleteEntity(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.mutation = .deleteEntity(v)}
      case 5:
        var v: Exocore_Store_UpdateTraitMutation?
        if let current = self.mutation {
          try decoder.handleConflictingOneOf()
          if case .updateTrait(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.mutation = .updateTrait(v)}
      case 6:
        var v: Exocore_Store_CompactTraitMutation?
        if let current = self.mutation {
          try decoder.handleConflictingOneOf()
          if case .compactTrait(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.mutation = .compactTrait(v)}
      case 99:
        var v: Exocore_Store_TestMutation?
        if let current = self.mutation {
          try decoder.handleConflictingOneOf()
          if case .test(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.mutation = .test(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entityID.isEmpty {
      try visitor.visitSingularStringField(value: self.entityID, fieldNumber: 1)
    }
    switch self.mutation {
    case .putTrait(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .deleteTrait(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .deleteEntity(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .updateTrait(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .compactTrait(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case .test(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Exocore_Store_EntityMutation, rhs: Exocore_Store_EntityMutation) -> Bool {
    if lhs.entityID != rhs.entityID {return false}
    if lhs.mutation != rhs.mutation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Exocore_Store_PutTraitMutation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PutTraitMutation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trait"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._trait)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._trait {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Exocore_Store_PutTraitMutation, rhs: Exocore_Store_PutTraitMutation) -> Bool {
    if lhs._trait != rhs._trait {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Exocore_Store_DeleteTraitMutation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteTraitMutation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trait_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.traitID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.traitID.isEmpty {
      try visitor.visitSingularStringField(value: self.traitID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Exocore_Store_DeleteTraitMutation, rhs: Exocore_Store_DeleteTraitMutation) -> Bool {
    if lhs.traitID != rhs.traitID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Exocore_Store_DeleteEntityMutation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteEntityMutation"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Exocore_Store_DeleteEntityMutation, rhs: Exocore_Store_DeleteEntityMutation) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Exocore_Store_UpdateTraitMutation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateTraitMutation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trait_id"),
    2: .same(proto: "trait"),
    3: .standard(proto: "field_mask"),
    4: .standard(proto: "if_last_operation_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.traitID)
      case 2: try decoder.decodeSingularMessageField(value: &self._trait)
      case 3: try decoder.decodeSingularMessageField(value: &self._fieldMask)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.ifLastOperationID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.traitID.isEmpty {
      try visitor.visitSingularStringField(value: self.traitID, fieldNumber: 1)
    }
    if let v = self._trait {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._fieldMask {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.ifLastOperationID != 0 {
      try visitor.visitSingularUInt64Field(value: self.ifLastOperationID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Exocore_Store_UpdateTraitMutation, rhs: Exocore_Store_UpdateTraitMutation) -> Bool {
    if lhs.traitID != rhs.traitID {return false}
    if lhs._trait != rhs._trait {return false}
    if lhs._fieldMask != rhs._fieldMask {return false}
    if lhs.ifLastOperationID != rhs.ifLastOperationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Exocore_Store_CompactTraitMutation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompactTraitMutation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "compacted_operations"),
    2: .same(proto: "trait"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.compactedOperations)
      case 2: try decoder.decodeSingularMessageField(value: &self._trait)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.compactedOperations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.compactedOperations, fieldNumber: 1)
    }
    if let v = self._trait {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Exocore_Store_CompactTraitMutation, rhs: Exocore_Store_CompactTraitMutation) -> Bool {
    if lhs.compactedOperations != rhs.compactedOperations {return false}
    if lhs._trait != rhs._trait {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Exocore_Store_CompactTraitMutation.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Exocore_Store_CompactTraitMutation.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "operation_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.operationID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operationID != 0 {
      try visitor.visitSingularUInt64Field(value: self.operationID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Exocore_Store_CompactTraitMutation.Operation, rhs: Exocore_Store_CompactTraitMutation.Operation) -> Bool {
    if lhs.operationID != rhs.operationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Exocore_Store_TestMutation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TestMutation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.success)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Exocore_Store_TestMutation, rhs: Exocore_Store_TestMutation) -> Bool {
    if lhs.success != rhs.success {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
