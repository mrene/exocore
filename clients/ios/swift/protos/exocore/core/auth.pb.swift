// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: exocore/core/auth.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Exocore_Core_AuthToken {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Data = SwiftProtobuf.Internal.emptyData

  public var signature: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Exocore_Core_AuthTokenData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cellID: Data = SwiftProtobuf.Internal.emptyData

  public var nodeID: Data = SwiftProtobuf.Internal.emptyData

  public var signatureDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _signatureDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_signatureDate = newValue}
  }
  /// Returns true if `signatureDate` has been explicitly set.
  public var hasSignatureDate: Bool {return self._signatureDate != nil}
  /// Clears the value of `signatureDate`. Subsequent reads from it will return its default value.
  public mutating func clearSignatureDate() {self._signatureDate = nil}

  public var expirationDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _expirationDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_expirationDate = newValue}
  }
  /// Returns true if `expirationDate` has been explicitly set.
  public var hasExpirationDate: Bool {return self._expirationDate != nil}
  /// Clears the value of `expirationDate`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationDate() {self._expirationDate = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _signatureDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _expirationDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "exocore.core"

extension Exocore_Core_AuthToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuthToken"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.data)
      case 2: try decoder.decodeSingularBytesField(value: &self.signature)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Exocore_Core_AuthToken, rhs: Exocore_Core_AuthToken) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Exocore_Core_AuthTokenData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuthTokenData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cell_id"),
    2: .standard(proto: "node_id"),
    3: .standard(proto: "signature_date"),
    4: .standard(proto: "expiration_date"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.cellID)
      case 2: try decoder.decodeSingularBytesField(value: &self.nodeID)
      case 3: try decoder.decodeSingularMessageField(value: &self._signatureDate)
      case 4: try decoder.decodeSingularMessageField(value: &self._expirationDate)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cellID.isEmpty {
      try visitor.visitSingularBytesField(value: self.cellID, fieldNumber: 1)
    }
    if !self.nodeID.isEmpty {
      try visitor.visitSingularBytesField(value: self.nodeID, fieldNumber: 2)
    }
    if let v = self._signatureDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._expirationDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Exocore_Core_AuthTokenData, rhs: Exocore_Core_AuthTokenData) -> Bool {
    if lhs.cellID != rhs.cellID {return false}
    if lhs.nodeID != rhs.nodeID {return false}
    if lhs._signatureDate != rhs._signatureDate {return false}
    if lhs._expirationDate != rhs._expirationDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
